; nREPL 0.2.0-preview
user> (in-ns 'fun-with-core-logic.core)
#<Namespace fun-with-core-logic.core>
fun-with-core-logic.core> foo
#<core$foo fun_with_core_logic.core$foo@4ac7bf90>
fun-with-core-logic.core> (foo 3)
3 Hello, World!
nil
fun-with-core-logic.core> append
#<core$append fun_with_core_logic.core$append@642daf7a>
fun-with-core-logic.core> (append [] [3 4 5])
ClassCastException java.lang.Boolean cannot be cast to clojure.lang.IFn  fun-with-core-logic.core/append (core.clj:15)
fun-with-core-logic.core> (append [] [3 4 5])
ClassCastException java.lang.Boolean cannot be cast to clojure.lang.IFn  fun-with-core-logic.core/append (core.clj:15)
fun-with-core-logic.core> (foo)
ArityException Wrong number of args (0) passed to: core$foo  clojure.lang.AFn.throwArity (AFn.java:437)
fun-with-core-logic.core> (foo 3 4)
ArityException Wrong number of args (2) passed to: core$foo  clojure.lang.AFn.throwArity (AFn.java:437)
fun-with-core-logic.core> (append [] [3 4 5])
[3 4 5]
fun-with-core-logic.core> (append [1 2] [3 4 5])
(1 2 3 4 5)
fun-with-core-logic.core> (append [1 2] [])
(1 2)
fun-with-core-logic.core> appendo
#<logic$appendo clojure.core.logic$appendo@454719db>
fun-with-core-logic.core> (run 1 (q) (appendo [1 2] [3 4 5] q))
((1 2 3 4 5))
fun-with-core-logic.core> (run 1 (q) (appendo [1 2] q [1 2 3 4 5]))
((3 4 5))
fun-with-core-logic.core> (run* (q) (appendo [1 2] q [1 2 3 4 5]))
((3 4 5))
fun-with-core-logic.core> (run 1 (q) (appendo [1 2] q [7 2 3 4 5]))
()
fun-with-core-logic.core> (run* (q) (appendo [1 2] q [7 2 3 4 5]))
()
fun-with-core-logic.core> (run* (q) (fresh (x)))
CompilerException clojure.lang.ArityException: Wrong number of args (1) passed to: logic$bind-STAR-, compiling:(NO_SOURCE_PATH:1:11) 
fun-with-core-logic.core> (run* (q) (fresh (x) (appendo q x [1 2 3 4 5])))
(() (1) (1 2) (1 2 3) (1 2 3 4) (1 2 3 4 5))
fun-with-core-logic.core> (run* (q) (fresh (x y) (appendo x y [1 2 3 4 5]) (== q [x y])))
([() [1 2 3 4 5]] [(1) (2 3 4 5)] [(1 2) (3 4 5)] [(1 2 3) (4 5)] [(1 2 3 4) (5)] [(1 2 3 4 5) ()])
fun-with-core-logic.core> (run* (q) (== q 1))
(1)
fun-with-core-logic.core> (run* (q) (== q 1) (== q 0))
()
fun-with-core-logic.core> (run* (q) (== q 0) (== q 1))
()
fun-with-core-logic.core> (run* (q) (fresh (x y) (appendo x y [1 2 3 4 5]) (== q [x y])))
([() [1 2 3 4 5]] [(1) (2 3 4 5)] [(1 2) (3 4 5)] [(1 2 3) (4 5)] [(1 2 3 4) (5)] [(1 2 3 4 5) ()])
fun-with-core-logic.core> (run* (q) (== q 1) (== q 0))
()
fun-with-core-logic.core> (run* (q) (conde [(== q 1) (== q 0)]))
()
fun-with-core-logic.core> (run* (q) (conde [(== q 1) ] [(== q 0)]))
(1 0)
fun-with-core-logic.core> (run* (q) (our-appendo [] [1 2 3] q))
([1 2 3])
fun-with-core-logic.core> (run* (q) (our-appendo [1 2 3] [] q))
()
fun-with-core-logic.core> (run 1 (q) (our-appendo [1 2] [3 4 5] q))
((1 2 3 4 5))
fun-with-core-logic.core> (run 1 (q) (our-appendo [1 2] [3 4 5] q))
((1 2 3 4 5))
fun-with-core-logic.core> (run 1 (q) (our-appendo [1 2] q [7 2 3 4 5]))
()
fun-with-core-logic.core> (run 1 (q) (our-appendo [1 2] q [1 2 3 4 5]))
((3 4 5))
fun-with-core-logic.core> (run* (q) (fresh (x y) (our-appendo x y [1 2 3 4 5]) (== q [x y])))
fun-with-core-logic.core> (run 1 (q) (fresh (x y) (our-appendo x y [1 2 3 4 5]) (== q [x y])))
([() [1 2 3 4 5]])
fun-with-core-logic.core> (run 2 (q) (fresh (x y) (our-appendo x y [1 2 3 4 5]) (== q [x y])))
([() [1 2 3 4 5]] [(1) (2 3 4 5)])
fun-with-core-logic.core> (run* (q) (fresh (x y) (our-appendo x y [1 2 3 4 5]) (== q [x y])))
([() [1 2 3 4 5]] [(1) (2 3 4 5)] [(1 2) (3 4 5)] [(1 2 3) (4 5)] [(1 2 3 4) (5)] [(1 2 3 4 5) ()])
fun-with-core-logic.core> 